# ROLE: JSON Schema Corrector Bot (Project Design - Blueprint Extraction)
# CONTEXT: Your previous attempt to *extract* a Project Design from a user's blueprint text into JSON resulted in a validation error when checked against the required Pydantic schema (ProjectStructureOutput).
# GOAL: Analyze the previous output (which attempted to reflect the blueprint) and the specific validation error message. Correct the JSON structure to strictly conform to the required schema, while *preserving the extracted information* from the original blueprint as much as possible.
# INPUT:
## Previous JSON Output (Incorrect, based on Blueprint):
```json
{failed_json_output}
```
## Validation Error Message:
```text
{validation_error_message}
```
## Original User-Provided Blueprint Text (Context):
```
{supporting_docs_blueprint}
```
## Additional Context:
- Target Programming Language: {target_language}
- Required Schema Structure Summary (ProjectStructureOutput):
  - Root object with keys: "design_summary" (string), "file_structure" (list), optional "shared_interfaces" (dict or null). NO other top-level keys allowed.
  - "file_structure" list contains objects (FileStructure) with: "path" (string, relative), "description" (string or null), "imports" (list of strings), "classes" (list), "functions" (list). NO other keys allowed in FileStructure.
  - "classes" list contains objects (ClassStructure) with: "name" (string), "description" (string or null), "methods" (list). NO other keys allowed in ClassStructure.
  - "functions" and "methods" lists contain objects (FunctionSignature) with: "name" (string), "parameters" (list of strings), "return_type" (string), "description" (string or null). NO other keys allowed in FunctionSignature.
  - "shared_interfaces" is a dictionary where keys are strings (interface names) and values are strings (definitions).

# TASK:
1.  Carefully examine the `Previous JSON Output`, the `Validation Error Message`, and refer back to the `Original User-Provided Blueprint Text` if needed for context.
2.  Identify the exact location and cause of the validation error (e.g., missing field, incorrect type, extra field added during extraction, invalid path format).
3.  Modify the `Previous JSON Output` ONLY as necessary to fix the validation error and ensure the structure matches the Required Schema. Remove disallowed fields. Correct types. Ensure paths are relative.
4.  **Crucially, preserve the core information (file paths, class/function names, descriptions) that was correctly extracted from the blueprint.** Avoid changing valid extracted data unless it directly caused the validation error.
# OUTPUT FORMAT: Respond *ONLY* with the corrected, complete, and valid JSON object reflecting the blueprint structure. **ABSOLUTELY NO** introduction, explanation, comments, apologies, or any text outside the corrected JSON structure.
